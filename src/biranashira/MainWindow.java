/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package biranashira;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.beans.PropertyVetoException;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.LayoutStyle;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.ELProperty;

/**
 *
 * @author ehrannm
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public MainWindow() {
        initComponents();
        ImageIcon img = new ImageIcon(getClass().getResource("/biranashira/images/music_saxophone.png"));
        //Toolkit.getDefaultToolkit().getImage();
        setIconImage(img.getImage());

        final GraphicsEnvironment localGraphicsEnvironment = GraphicsEnvironment.getLocalGraphicsEnvironment();

        GraphicsEnvironment ge = localGraphicsEnvironment;
        GraphicsDevice[] gs = ge.getScreenDevices();
        if (gs.length > 1) {
            try {
                model.setShowSecondMonitor(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new BindingGroup();

        model = new Model();
        jSplitPane1 = new JSplitPane();
        songPanel = new JPanel();
        jToolBar1 = new JToolBar();
        showLyricsOnSecondScreen = new JToggleButton();
        toolsPanel = new JPanel();
        playlistActionsPanel = new JPanel();
        loadPlaylist = new JButton();
        newPlaylist = new JButton();
        savePlaylist = new JButton();
        otherActionsPanel = new JPanel();
        jSplitPane2 = new JSplitPane();
        jPanel2 = new JPanel();
        playListsScrolPanel = new JScrollPane();
        playListsTable = new JTable();
        jLabel2 = new JLabel();
        jPanel1 = new JPanel();
        searchBox = new JPanel();
        jTextField1 = new JTextField();
        jLabel1 = new JLabel();
        playListsScrolPanel1 = new JScrollPane();
        playListsTable1 = new JTable();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setName("Form"); // NOI18N

        jSplitPane1.setName("jSplitPane1"); // NOI18N

        songPanel.setName("songPanel"); // NOI18N
        songPanel.setLayout(new BorderLayout());

        jToolBar1.setRollover(true);
        jToolBar1.setName("jToolBar1"); // NOI18N

        ResourceBundle bundle = ResourceBundle.getBundle("biranashira/Bundle"); // NOI18N
        showLyricsOnSecondScreen.setText(bundle.getString("MainWindow.showLyricsOnSecondScreen.text")); // NOI18N
        showLyricsOnSecondScreen.setFocusable(false);
        showLyricsOnSecondScreen.setHorizontalTextPosition(SwingConstants.CENTER);
        showLyricsOnSecondScreen.setName("showLyricsOnSecondScreen"); // NOI18N
        showLyricsOnSecondScreen.setVerticalTextPosition(SwingConstants.BOTTOM);

        Binding binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, model, ELProperty.create("${showSecondMonitor}"), showLyricsOnSecondScreen, BeanProperty.create("selected"), " cb2");
        bindingGroup.addBinding(binding);

        showLyricsOnSecondScreen.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                showLyricsOnSecondScreenActionPerformed(evt);
            }
        });
        jToolBar1.add(showLyricsOnSecondScreen);

        songPanel.add(jToolBar1, BorderLayout.PAGE_START);

        jSplitPane1.setRightComponent(songPanel);

        toolsPanel.setMinimumSize(new Dimension(350, 0));
        toolsPanel.setName("toolsPanel"); // NOI18N
        toolsPanel.setPreferredSize(new Dimension(600, 288));

        playlistActionsPanel.setName("playlistActionsPanel"); // NOI18N
        playlistActionsPanel.setLayout(new GridLayout(1, 0));

        loadPlaylist.setIcon(new ImageIcon(getClass().getResource("/biranashira/images/open_folder.png"))); // NOI18N
        loadPlaylist.setText(bundle.getString("MainWindow.loadPlaylist.text")); // NOI18N
        loadPlaylist.setFocusable(false);
        loadPlaylist.setHorizontalTextPosition(SwingConstants.CENTER);
        loadPlaylist.setName("loadPlaylist"); // NOI18N
        loadPlaylist.setVerticalTextPosition(SwingConstants.BOTTOM);
        loadPlaylist.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                loadPlaylistActionPerformed(evt);
            }
        });
        playlistActionsPanel.add(loadPlaylist);

        newPlaylist.setIcon(new ImageIcon(getClass().getResource("/biranashira/images/document.png"))); // NOI18N
        newPlaylist.setText(bundle.getString("MainWindow.newPlaylist.text")); // NOI18N
        newPlaylist.setFocusable(false);
        newPlaylist.setHorizontalTextPosition(SwingConstants.CENTER);
        newPlaylist.setName("newPlaylist"); // NOI18N
        newPlaylist.setVerticalTextPosition(SwingConstants.BOTTOM);
        newPlaylist.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                newPlaylistActionPerformed(evt);
            }
        });
        playlistActionsPanel.add(newPlaylist);

        savePlaylist.setIcon(new ImageIcon(getClass().getResource("/biranashira/images/diskette.png"))); // NOI18N
        savePlaylist.setText(bundle.getString("MainWindow.savePlaylist.text")); // NOI18N
        savePlaylist.setFocusable(false);
        savePlaylist.setHorizontalTextPosition(SwingConstants.CENTER);
        savePlaylist.setName("savePlaylist"); // NOI18N
        savePlaylist.setVerticalTextPosition(SwingConstants.BOTTOM);
        playlistActionsPanel.add(savePlaylist);

        otherActionsPanel.setName("otherActionsPanel"); // NOI18N

        jSplitPane2.setOrientation(JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setName("jSplitPane2"); // NOI18N

        jPanel2.setMinimumSize(new Dimension(0, 200));
        jPanel2.setName("jPanel2"); // NOI18N

        playListsScrolPanel.setMinimumSize(new Dimension(21, 100));
        playListsScrolPanel.setName("playListsScrolPanel"); // NOI18N

        playListsTable.setModel(new DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "שם השיר", "אמן", "אלבום"
            }
        ) {
            Class[] types = new Class [] {
                String.class, String.class, String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        playListsTable.setColumnSelectionAllowed(true);
        playListsTable.setName("playListsTable"); // NOI18N
        playListsScrolPanel.setViewportView(playListsTable);
        playListsTable.getColumnModel().getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        playListsTable.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("MainWindow.playListsTable.columnModel.title0_1")); // NOI18N
        playListsTable.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("MainWindow.playListsTable.columnModel.title1_1")); // NOI18N
        playListsTable.getColumnModel().getColumn(2).setHeaderValue(bundle.getString("MainWindow.playListsTable.columnModel.title2_1")); // NOI18N

        jLabel2.setFont(jLabel2.getFont().deriveFont(jLabel2.getFont().getStyle() | Font.BOLD, jLabel2.getFont().getSize()+3));
        jLabel2.setText(bundle.getString("MainWindow.jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(playListsScrolPanel, GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playListsScrolPanel, GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane2.setTopComponent(jPanel2);

        jPanel1.setName("jPanel1"); // NOI18N

        searchBox.setName("searchBox"); // NOI18N
        searchBox.addComponentListener(new ComponentAdapter() {
            public void componentShown(ComponentEvent evt) {
                searchBoxComponentShown(evt);
            }
        });
        searchBox.setLayout(new BorderLayout(5, 0));

        jTextField1.setText(bundle.getString("MainWindow.jTextField1.text")); // NOI18N
        jTextField1.setName("jTextField1"); // NOI18N
        searchBox.add(jTextField1, BorderLayout.CENTER);

        jLabel1.setText(bundle.getString("MainWindow.jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        searchBox.add(jLabel1, BorderLayout.LINE_START);

        playListsScrolPanel1.setMinimumSize(new Dimension(21, 100));
        playListsScrolPanel1.setName("playListsScrolPanel1"); // NOI18N

        playListsTable1.setModel(new DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "שם השיר", "אמן", "אלבום"
            }
        ) {
            Class[] types = new Class [] {
                String.class, String.class, String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        playListsTable1.setName("playListsTable1"); // NOI18N
        playListsScrolPanel1.setViewportView(playListsTable1);
        playListsTable1.getColumnModel().getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        playListsTable1.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("MainWindow.playListsTable.columnModel.title0_1")); // NOI18N
        playListsTable1.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("MainWindow.playListsTable.columnModel.title1_1")); // NOI18N
        playListsTable1.getColumnModel().getColumn(2).setHeaderValue(bundle.getString("MainWindow.playListsTable.columnModel.title2_1")); // NOI18N

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(searchBox, GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
                    .addComponent(playListsScrolPanel1, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchBox, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(playListsScrolPanel1, GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane2.setRightComponent(jPanel1);

        GroupLayout otherActionsPanelLayout = new GroupLayout(otherActionsPanel);
        otherActionsPanel.setLayout(otherActionsPanelLayout);
        otherActionsPanelLayout.setHorizontalGroup(
            otherActionsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        otherActionsPanelLayout.setVerticalGroup(
            otherActionsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, GroupLayout.Alignment.TRAILING)
        );

        GroupLayout toolsPanelLayout = new GroupLayout(toolsPanel);
        toolsPanel.setLayout(toolsPanelLayout);
        toolsPanelLayout.setHorizontalGroup(
            toolsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(otherActionsPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(GroupLayout.Alignment.TRAILING, toolsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(playlistActionsPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        toolsPanelLayout.setVerticalGroup(
            toolsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(toolsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(playlistActionsPanel, GroupLayout.PREFERRED_SIZE, 85, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(otherActionsPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(toolsPanel);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, GroupLayout.DEFAULT_SIZE, 872, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSplitPane1, GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadPlaylistActionPerformed(ActionEvent evt) {//GEN-FIRST:event_loadPlaylistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_loadPlaylistActionPerformed

    private void newPlaylistActionPerformed(ActionEvent evt) {//GEN-FIRST:event_newPlaylistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newPlaylistActionPerformed

    private void searchBoxComponentShown(ComponentEvent evt) {//GEN-FIRST:event_searchBoxComponentShown
    }//GEN-LAST:event_searchBoxComponentShown

    private void showLyricsOnSecondScreenActionPerformed(ActionEvent evt) {//GEN-FIRST:event_showLyricsOnSecondScreenActionPerformed
        try {
            toggleShowLyrics(model.isShowSecondMonitor());
        } catch (PropertyVetoException ex) {
            JOptionPane.showMessageDialog(null, "You don't seem to have a second monitor connected");
        }
    }//GEN-LAST:event_showLyricsOnSecondScreenActionPerformed
    private LyricsWindow lyricsWindow = null;

    private void toggleShowLyrics(boolean show) throws PropertyVetoException {

        if (show) {
            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            GraphicsDevice[] gs = ge.getScreenDevices();
            if (gs.length > 1) {
                if (lyricsWindow == null) {
                    lyricsWindow = new LyricsWindow();
                }
                lyricsWindow.setVisible(true);
                lyricsWindow.setExtendedState(lyricsWindow.getExtendedState() | JFrame.MAXIMIZED_BOTH);
                gs[1].setFullScreenWindow(lyricsWindow);
            } else {
                if (lyricsWindow != null) {
                    lyricsWindow.dispose();
                }
                model.setShowSecondMonitor(false);
                throw new PropertyVetoException("You don't seem to have a second monitor connected", null);
            }
        } else {
            if (lyricsWindow != null) {
                lyricsWindow.dispose();
            }
            lyricsWindow = null;
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JSplitPane jSplitPane1;
    private JSplitPane jSplitPane2;
    private JTextField jTextField1;
    private JToolBar jToolBar1;
    private JButton loadPlaylist;
    private Model model;
    private JButton newPlaylist;
    private JPanel otherActionsPanel;
    private JScrollPane playListsScrolPanel;
    private JScrollPane playListsScrolPanel1;
    private JTable playListsTable;
    private JTable playListsTable1;
    private JPanel playlistActionsPanel;
    private JButton savePlaylist;
    private JPanel searchBox;
    private JToggleButton showLyricsOnSecondScreen;
    private JPanel songPanel;
    private JPanel toolsPanel;
    private BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
